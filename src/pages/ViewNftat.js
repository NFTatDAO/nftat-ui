import { useEthers } from "@usedapp/core"
import { useEffect, useState } from "react"
import networkMapping from "../chain-info/deployments/map.json"
import { utils, constants } from "ethers"
import { makeStyles } from '@mui/styles'
import Countdown from 'react-countdown'
import { useContractCall, ContractCall } from "@usedapp/core"
import NFTat from "../chain-info/contracts/NFTat.json"


const useStyles = makeStyles((theme) => ({
    title: {
        textAlign: "center",
        padding: 4,
    }
}))

export const ViewNftat = () => {
    const { chainId } = useEthers()
    const [image, setImage] = useState(null)
    const [openseaUrl, setOpenseaUrl] = useState(null)
    useEffect(() => {
        if (String(chainId) == "4") {
            setOpenseaUrl("https://testnets.opensea.io/assets/")
        } else {
            setOpenseaUrl("https://opensea.io/assets/matic/")
        }
    }, [chainId])
    const classes = useStyles()
    const { abi } = NFTat
    const nftatInterface = new utils.Interface(abi)
    const nftatAddress = chainId ? networkMapping[String(chainId)]["NFTat"][0] : constants.AddressZero
    const tokenURI = useContractCall({ abi: nftatInterface, address: nftatAddress, method: "tokenURI", args: [0] })
    useEffect(() => {
        fetch(tokenURI).then(response => response.json()).then(json_response => setImage(json_response["image"]))
    })

    const currentStaker = "@PatrickAlphaC"
    const twitter = "https://twitter.com/PatrickAlphaC"
    const date = 1634101446000

    return (
        <div>
            <h1 className={classes.title}>Current Staker is <a href={twitter}>PatrickAlphaC</a></h1>
            <p>NFTat is an experimental dApp where a user stakes funds to promise to get a tattoo generated by a DAO. Due to this being an experiment, right now, it's just Patrick who is staking for a tattoo. The process goes as follows:</p>
            <p>1. User stakes some amount. 1 "NFTat" NFT is minted, and 227 "NFTatPixel" NFTs are also minted. </p>
            <p>Each "NFTatPixel" represents a "pixel" of the tattoo at a specific coordinate. </p>
            <p>2. Users can then buy the Pixel NFTs and "change their colors". Which will change the resulting NFT.  </p>
            <p>3. After a time period is up, the tattoo is locked in place. </p>
            <p>4. In order to get the original stake back, the user has to get the tattoo, and post an image of them with the tattoo. </p>
            <p>5. Users with NFTT (NFTat Token) vote using snapshot on whether or not they actually got the tattoo (a subjective oracle) </p>
            <p>6. A Chainlink node returns the result of the vote, releasing the funds back only if the vote passed. </p>
            <h1 className={classes.title}>Time Left to Change Tattoo Colors </h1>
            <h1 className={classes.title}><Countdown date={date} >
                No more colors to change!
            </Countdown></h1>
            <h1 className={classes.title}>ðŸ‘‡ Current Tattoo ðŸ‘‡</h1>
            <a href={`${openseaUrl}${nftatAddress}/0`} target="_blank" rel="noreferrer">
                <img
                    src={image}
                    alt="nftat"
                    loading="lazy"

                />
            </a>
        </div>
    )
}
